// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgres"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.text annotations in model Account below
    // Further reading: 
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

//////////////////////////////////////////////
// Lifts, e.g. what exercise are we doing?  //
//////////////////////////////////////////////
model Lift {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())

    name        String  @unique
    description String
    cues        String? @db.Text()

    imageUrl    String?
    youtubeUrls String[]

    slug String

    Log Log[]
}

///////////////////
// Logs, Workout //
///////////////////

// A Log record of a lift
model Log {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())

    lift   Lift @relation(fields: [liftId], references: [id])
    weight Int
    reps   Int

    cues     String? @db.Text()
    comments String? @db.Text()

    User   User   @relation(fields: [userId], references: [id])
    userId String
    liftId Int
}

/////////////////////////////
// Necessary for Next Auth //
/////////////////////////////
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    Log           Log[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
