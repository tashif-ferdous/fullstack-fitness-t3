// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgres"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.text annotations in model Account below
    // Further reading: 
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

////////////
// Lifts  //
////////////
model Lift {
    id          Int       @id @default(autoincrement())
    name        String    @unique
    cues        String?
    link        String?
    movement    Movement  @relation(fields: [movementId], references: [id])
    movementId  Int
    equipment   Equipment @relation(fields: [equipmentId], references: [id])
    equipmentId Int
    muscles     Muscle[]
    Set         Set[]
}

model Movement {
    id   Int    @id @default(autoincrement())
    name String @unique
    Lift Lift[]
}

model Equipment {
    id   Int    @id @default(autoincrement())
    name String @unique
    Lift Lift[]
}

model Muscle {
    id    Int    @id @default(autoincrement())
    name  String @unique
    lifts Lift[]
}

/////////////////////////////////////////////////////
// Sets & Programs (e.g. blueprints for a workout) //
/////////////////////////////////////////////////////
model Set {
    id        Int      @id @default(autoincrement())
    name      String   @unique
    lift      Lift     @relation(fields: [liftId], references: [id])
    reps      Int[]
    liftId    Int
    Program   Program? @relation(fields: [programId], references: [id])
    programId Int?
}

model Program {
    id       Int    @id @default(autoincrement())
    name     String @unique
    sets     Set[]
    // To order the sets by a CSV delimited string value of its Id 
    // is there a better way to store ordering of a set?
    setOrder String
}

/////////////////////////////
// Necessary for Next Auth //
/////////////////////////////
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
